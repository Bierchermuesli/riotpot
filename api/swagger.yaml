openapi: 3.0.2
info:
  title: RIoTPoT API
  version: '1.0'
  contact:
    email: ricardoyaben@gmail.com
    name: Ricardo Yaben
  license:
    name: MIT
    url: https://choosealicense.com/licenses/mit/
servers:
  - url: api
    description: API path for riotpot
tags:
  - name: Proxies
  - name: Services
components:
  schemas:
    Px:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID
        port:
          type: integer
          minimum: 1
          maximum: 65536
          example: 8080
          description: Port to listen for connections
        protocol:
          type: string
          enum:
            - tcp
            - udp
          example: tcp
          description: Trasport layer communication protocol
      required:
        - id
    Service:
      type: object
      allOf:
        - $ref: '#/components/schemas/Px'
      properties:
        name:
          type: string
          example: Service1
          description: Name of the service
        host:
          type: string
          example: 0.0.0.0
          description: Address in where the service is situated
        locked:
          type: boolean
          example: false
          description: >-
            Whether the service can be deleted. This property is fixated for
            Plugins
    Proxy:
      type: object
      allOf:
        - $ref: '#/components/schemas/Px'
      properties:
        status:
          type: integer
          enum:
            - 0
            - 1
          example: 0
          description: State of the service. Running (1) or Stopped (0)
        service:
          $ref: '#/components/schemas/Service'
paths:
  /proxies:
    get:
      operationId: getProxies
      description: Get all the registered proxies
      tags:
        - Proxies
      responses:
        '200':
          description: Returns all the proxies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proxy'
    post:
      operationId: createProxy
      description: Create a new proxy
      tags:
        - Proxies
      parameters:
        - in: query
          name: port
          required: true
          schema:
            $ref: '#/components/schemas/Px/properties/port'
        - in: query
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/Px/properties/protocol'
      responses:
        '200':
          description: Returns the structure of the proxy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
                
  /proxies/proxy/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Px/properties/id'
    get:
      operationId: getProxy
      description: Get an instance of a registered proxy
      tags:
        - Proxies
      responses:
        '200':
          description: Returns the instance of the proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
          links:
            status:
              operationId: changeProxyStatus
              parameters:
                id: $request.path.id
    patch:
      operationId: updateProxy
      description: Updates a proxy with new values
      tags:
        - Proxies
      parameters:
        - in: query
          name: port
          required: false
          schema:
            $ref: '#/components/schemas/Px/properties/port'
        - in: query
          name: service__id
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Returns the instance of the proxy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy'
    delete:
      operationId: deleteProxy
      description: Stops and deletes a registered proxy
      tags:
        - Proxies
      responses:
        '200':
          description: OK
          
  /proxies/proxy/{id}/status:
    description: Change the status of the proxy
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Px/properties/id'
    post:
      operationId: changeProxyStatus
      description: Changes the status
      tags:
        - Proxies
      parameters:
        - in: query
          name: status
          required: true
          schema:
            $ref: '#/components/schemas/Proxy/properties/status'
      responses:
        '200':
          description: Returns the current status of the proxy after the changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proxy/properties/status'
                
  /services:
    get:
      operationId: getServices
      description: Get all the registered services
      tags:
        - Services
      responses:
        '200':
          description: Returns all the proxies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      operationId: createService
      description: Create a new Service
      tags:
        - Services
      parameters:
        - in: query
          name: port
          required: true
          schema:
            $ref: '#/components/schemas/Px/properties/port'
        - in: query
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/Px/properties/protocol'
        - in: query
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/Service/properties/name'
        - in: query
          name: host
          required: true
          schema:
            $ref: '#/components/schemas/Service/properties/host'
      responses:
        '200':
          description: Returns the structure of the proxy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
                
  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Px/properties/id'
    get:
      operationId: getService
      description: Get an instance of a registered service
      tags:
        - Services
      responses:
        '200':
          description: Returns the instance of the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

    patch:
      operationId: updateService
      description: Updates a service with new values
      tags:
        - Services
      parameters:
        - in: query
          name: port
          required: false
          schema:
            $ref: '#/components/schemas/Px/properties/port'
        - in: query
          name: name
          required: false
          schema:
            $ref: '#/components/schemas/Service/properties/name'
        - in: query
          name: host
          required: false
          schema:
            $ref: '#/components/schemas/Service/properties/host'
        - in: query
          name: locked
          required: false
          schema:
            $ref: '#/components/schemas/Service/properties/locked'
      responses:
        '200':
          description: Returns the instance of the proxy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      operationId: deleteService
      description: Removes a service
      tags: 
        - Services
      responses:
        '200':
          description: OK
